#!/bin/bash
# video2img converts video to jpg-images and adds exif date-time-info to each image
# AD 2017-08-04
#
######################################
uses=60                         # use every n=1.. picture
######################################
let skipimages=uses-1;

if [ $# -gt 0 ]; then
    filepath=${1%/*};
    filename=${1##*/};
    if [ "$filepath" != "$filename" ]; then
        cd $filepath
    fi
# 		echo $filepath"---"$filename
    sourcetype=${filename##*.}
    sourcetype=${sourcetype,,}        # lowercase
    sourcename=${filename%%.*}
#
    if [ -f "$filename" ]; then             # if exists
        if  [ $sourcetype == "mp4" ] ||
            [ $sourcetype == "mov" ] ||
            [ $sourcetype == "avi" ] ||
            [ $sourcetype == "mpg" ]; then
            datetime=$(mediainfo --Inform="Video;%Encoded_Date%" "$filename");  # starttime
            framerate=$(mediainfo --Inform="Video;%FrameRate%" "$filename");    # average framerate per second
            duration=$(mediainfo --Inform="Video;%Duration%" "$filename");      # milliseconds
            framestotal=`echo "scale=0; $duration*$framerate/1000" | bc`
            frametime=`echo "scale=4; 1/$framerate" | bc`;

            datetime=$(echo $datetime | grep -Eo "([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})")
            datetime=$(date -d "$datetime gmt" +"%Y-%m-%d %H:%M:%S")          # with gmt date calculates CET and CEST - summertime!

            echo "Video date/time: "$datetime" avg framerate: "$framerate" frames total: "$framestotal;

            year=$(  echo  "$datetime" | cut -c 1-4)              # 4-stellig wegen PrÃ¼fung auf falsche Jahreszahl
            month=$( echo  "$datetime" | cut -c 6-7)
            day=$(   echo  "$datetime" | cut -c 9-10)
            hour=$(  echo  "$datetime" | cut -c 12-13)
            minute=$(echo  "$datetime" | cut -c 15-16)
            second=$(echo  "$datetime" | cut -c 18-19)
                                                                # remove trailing zeros - otherwise they are interpreted as octal values
            month=`echo "scale=0; $month*1" | bc`;
            day=`echo "scale=0; $day*1" | bc`;
            hour=`echo "scale=0; $hour*1" | bc`;
            minute=`echo "scale=0; $minute*1" | bc`;
            second=`echo "scale=0; $second*1" | bc`;

            if [ ! -d "img" ]; then
                mkdir "img"
            fi

            ###############################################################
            ffmpeg -v quiet -stats -i "$filename" -r $framerate -f image2 -qscale:v 5 "img/""$sourcename""_%06d.jpg"       # generate all the images
#             ffmpeg -i "$filename" -r $framerate -f image2 -qscale:v 5 "img/""$sourcename""_%06d.jpg"       # generate all the images
            ###############################################################
            cd "img"
            milliseconds=$second;
            imgfileindex=1;
            let skipcounter=skipimages              # start with first image
            imgfilename="$sourcename""_"$(printf "%06d" $imgfileindex)".jpg";
#             echo "Datum: "$year":"$month":"$day:" "$hour":"$minute":"$second;
            datetimestamp=$(printf "%04d" $year)":"$(printf "%02d" $month)":"$(printf "%02d" $day)" "$(printf "%02d" $hour)":"$(printf "%02d" $minute)":"$(printf "%02d" $second);                      #           2005:04:11 19:06:52
            while [ -f "$imgfilename" ]; do
                if [ $skipcounter -eq $skipimages ]; then
                    let skipcounter=0;
                    ###############################################################
#                    exiftool  -stay_open True -overwrite_original -DateTimeOriginal="$datetimestamp" "$imgfilename"  1>>/dev/null         #
                    exiv2 -M"set Exif.Image.DateTimeOriginal $datetimestamp" "$imgfilename"
                    ###############################################################
                    progress=`echo "scale=0; $imgfileindex/$framestotal*100.0" | bc`;
                    echo -en $imgfilename" -> "$imgfileindex" of "$framestotal" ("$progress"%) -> " $datetimestamp "\r"
                else
                    rm "$imgfilename";
                    let skipcounter=skipcounter+1;
                fi
                let imgfileindex=imgfileindex+1;
                imgfilename="$sourcename""_"$(printf "%06d" $imgfileindex)".jpg";

                milliseconds=`echo "scale=4; $milliseconds+$frametime" | bc`;
                second=`echo "scale=0; $milliseconds/1" | bc`;
                if [ $second -gt 59 ]; then
                    second=0;
                    milliseconds=0;
                    let minute=minute+1;
                    if [ $minute -gt 59 ]; then
                        minute=0;
                        let hour=$hour+1;
                        if [ $hour -gt 23 ]; then
                            hour=0;
                            let day=day+1;                               # TODO month-changing, seldom needed ;-)
                        fi
                    fi
                fi
                datetimestamp=$(printf "%04d" $year)":"$(printf "%02d" $month)":"$(printf "%02d" $day)" "$(printf "%02d" $hour)":"$(printf "%02d" $minute)":"$(printf "%02d" $second);                      #           2005:04:11 19:06:52
            done
        fi
        echo
    else
        echo -e " \E[1;33;40m panic, "$filename "not found \E[0;37;40m "
    fi
else
    echo "video2img converts video to jpg-images and adds exif date-time-info to each image"
    echo "ffmpeg, mediainfo and exiftool needed"
    echo "Syntax: video2img video.mp4|avi|mpg"
fi
